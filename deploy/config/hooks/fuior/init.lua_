local api = require("deploy.src.api")
local util = require("deploy.src.util")

api.register_hook("build:prepare", function (context)
  local fuior = require "deploy.config.hooks.fuior.fuior"
  local intl = require("deploy.src.intl")
  local path = require("path")

  local namespaces = {}
  local precompiled_files = {}
  local original_files = {}

  local function rmf(filename)
    pcall(function () path.remove(filename) end)
  end

  path.each(path.join("fuior", "src", "*"), "f", function (filename)
    local _, ext = path.splitext(filename)
    if ext ~= ".fui" then return end

    original_files[filename] = util.read_file(filename)

    local compiled, intl_data, namespace = fuior.compile(filename)
    namespaces[namespace] = intl.merge(namespaces[namespace], intl_data)

    local precompiled_filename = filename .. ".precompiled.lua"
    util.write_file(precompiled_filename, compiled)
    precompiled_files[precompiled_filename] = true

    rmf(filename)
  end, { recurse = true })

  for namespace, intl_data in pairs(namespaces) do
    local filename = path.join("intl", namespace .. ".en.lua")
    util.write_file(filename, intl.stringify("lua", intl_data))
  end

  return function ()
    for filename, data in pairs(original_files) do
      util.write_file(filename, data)
    end

    for filename in pairs(precompiled_files) do
      rmf(filename)
    end

    for namespace in pairs(namespaces) do
      local filename = path.join("intl", namespace .. ".en.lua")
      rmf(filename)
    end
  end
end)

api.register_hook("resolve:per_platform_dependencies", function (added_deps, removed_deps)
  removed_deps = removed_deps or {}
  removed_deps[#removed_deps+1] = "critique%-gaming/fuior"
  return added_deps, removed_deps
end)

api.register_hook("intl_export:run", function (format, output_dir)
  local fuior = require "deploy.config.hooks.fuior.fuior"
  local intl = require("deploy.src.intl")
  local path = require("path")

  local namespaces = {}

  path.each(path.join("fuior", "src", "*"), "f", function (filename)
    local _, ext = path.splitext(filename)
    if ext ~= ".fui" then return end

    local _, intl_data, namespace = fuior.compile(filename)
    namespaces[namespace] = intl.merge(namespaces[namespace], intl_data)
  end, { recurse = true })

  for namespace, intl_data in pairs(namespaces) do
    local filename = path.join(output_dir, namespace .. ".en." .. format)
    util.write_file(filename, intl.stringify(format, intl_data))
  end
end)

api.register_command({
  id = "intl_fuior",

  parser_config = function (parser)
    local cmd = parser:command("intl_fuior", "Export intl strings from a fuior file")
    cmd:argument("fuior_file", "Path to the fuior file to export from")
    cmd:argument("out_file", "Path to exported file")
    cmd:option("--format", "Output format. One of: lua, csv", "lua")
  end,

  run = function (args)
    local path = require("path")
    local intl = require("deploy.src.intl")

    -- Try to make path relative to project dir, so that path hashes are kept stable
    local fuior_file = path.normalize(args.fuior_file)
    if path.isabs(fuior_file) then
      local pwd = path.ensure_dir_end(path.currentdir())
      if fuior_file:sub(1, #pwd) == pwd then
        fuior_file = fuior_file:sub(#pwd + 1)
      end
    end

    local fuior = require "deploy.config.hooks.fuior.fuior"
    local _, intl_data = fuior.compile(fuior_file)
    util.write_file(args.out_file, intl.stringify(args.format, intl_data))
  end,
})
